     public List<CadRegraCobranca> FiltraRegrasPorMetrica(int ctplcId, int cmsId)
        {
            var regrasFiltradas = this.Get().Where(x => x.CtplcId == ctplcId && x.CmsId == cmsId);

            return regrasFiltradas.ToList();
        }

        public List<CadRegraCobranca> SelecionaRegras(List<CadRegraCobranca> regras, decimal valorMedido)
        {
            var item1 = regras.Where(x => x.CrcValorMetrica < valorMedido).OrderBy(x => x.CrcValorMetrica).First();
            var item2 = regras.Where(x => x.CrcValorMetrica > valorMedido).OrderBy(x => x.CrcValorMetrica).First();

            List<CadRegraCobranca> result = new List<CadRegraCobranca>();
            {
                if (item1 != null)
                {
                    result.Add(item1);
                }
                if (item2 != null)
                {
                    result.Add(item2);
                }
                return result;
            }
        }

        #region CALCULAREGRA

        public decimal CalculaRegra(CadRegraCobranca cadRegraCobranca, decimal valorMedido)
        {
            var ValorCobranca = cadRegraCobranca.CrcValorCobranca;
            var metrica = cadRegraCobranca.CrcValorMetrica;
            var exc = cadRegraCobranca.CrcValorCobrancaExcedente;
            decimal adicional = 0;
            

            if (exc != null && valorMedido > metrica)
            {
                adicional = (valorMedido - metrica) * (exc.Value);
            }
            return ValorCobranca + adicional;
        }

        public decimal CalculaRegra2(CadRegraCobranca cadRegraCobranca, decimal valorMedido)
        {
           
            decimal adicional = 0;


            if (cadRegraCobranca.CrcValorCobrancaExcedente!= null && valorMedido > cadRegraCobranca.CrcValorMetrica)
            {
                adicional = (valorMedido - cadRegraCobranca.CrcValorMetrica) * (cadRegraCobranca.CrcValorCobrancaExcedente.Value);
            }
            return cadRegraCobranca.CrcValorCobranca + adicional;
        }

        public decimal CalculaRegra3(CadRegraCobranca cadRegraCobranca, decimal valorMedido)
        {
            if (cadRegraCobranca.CrcValorCobrancaExcedente != null && valorMedido > cadRegraCobranca.CrcValorMetrica)
            {
               var  adicional = (valorMedido - cadRegraCobranca.CrcValorMetrica) * (cadRegraCobranca.CrcValorCobrancaExcedente.Value);
                return cadRegraCobranca.CrcValorCobranca + adicional;
            }
            else
            {
                return cadRegraCobranca.CrcValorCobranca ;
            }
           
        }
        public decimal CalculaRegra4(CadRegraCobranca cadRegraCobranca, decimal valorMedido)
        {
            var valorCobranca = cadRegraCobranca.CrcValorCobranca;
            var valorMetrica = cadRegraCobranca.CrcValorMetrica;
            var valorExcedente = cadRegraCobranca.CrcValorCobrancaExcedente;
            decimal adicional = 0;


            if (valorExcedente != null && valorMedido > valorMetrica)
            {
                adicional = (valorMedido - valorMetrica) * (valorExcedente.Value);
                return valorCobranca + adicional;
            }
            else
            {
                return valorCobranca;
            }
        }
        public decimal? CalculaRegra5(CadRegraCobranca cadRegraCobranca, decimal valorMedido)
        {
            var valorCobranca = cadRegraCobranca.CrcValorCobranca;
            var valorMetrica = cadRegraCobranca.CrcValorMetrica;
            var valorExcedente = cadRegraCobranca.CrcValorCobrancaExcedente;
            decimal? adicional = (valorMedido - valorMetrica) * valorExcedente;

            decimal? calculo = valorMetrica < valorMedido ? adicional : valorCobranca;
            return calculo;
        }

        public decimal CalculaRegra6(CadRegraCobranca cadRegraCobranca, decimal valorMedido)
        {
            var valorCobranca = cadRegraCobranca.CrcValorCobranca;
            var valorMetrica = cadRegraCobranca.CrcValorMetrica;
            var valorExcedente = cadRegraCobranca.CrcValorCobrancaExcedente;
            decimal adicional = ((valorMedido - valorMetrica) * valorExcedente.Value + valorCobranca);

            decimal calculo = valorMetrica < valorMedido ? adicional : valorCobranca;
            return calculo;
        }
        public decimal CalculaRegra7(CadRegraCobranca cadRegraCobranca, decimal valorMedido)
        {
            var valorCobranca = cadRegraCobranca.CrcValorCobranca;
            var valorMetrica = cadRegraCobranca.CrcValorMetrica;
            var valorExcedente = cadRegraCobranca.CrcValorCobrancaExcedente;
            decimal valorComAdicional = (valorMedido - valorMetrica) * (valorExcedente == null ? 0 : (decimal)valorExcedente);

            decimal calculo = valorMetrica < valorMedido ? valorComAdicional : valorCobranca;
            return calculo;
        }
        public decimal CalculaRegra8(CadRegraCobranca cadRegraCobranca, decimal valorMedido)
        {


            return cadRegraCobranca.CrcValorMetrica < valorMedido ? ((valorMedido - cadRegraCobranca.CrcValorMetrica) * (cadRegraCobranca.CrcValorCobrancaExcedente == null ? 0 : (decimal)cadRegraCobranca.CrcValorCobrancaExcedente)) : cadRegraCobranca.CrcValorCobranca;
            
        }
        public decimal CalculaRegra9(CadRegraCobranca cadRegraCobranca, decimal valorMedido) => cadRegraCobranca.CrcValorMetrica < valorMedido ? ((valorMedido - cadRegraCobranca.CrcValorMetrica) * (cadRegraCobranca.CrcValorCobrancaExcedente == null ? 0 : (decimal)cadRegraCobranca.CrcValorCobrancaExcedente)) : cadRegraCobranca.CrcValorCobranca;
        public decimal CalculaRegra10(CadRegraCobranca cadRegraCobranca, decimal valorMedido)
        {
            var valorCobranca = cadRegraCobranca.CrcValorCobranca;
            var valorMetrica = cadRegraCobranca.CrcValorMetrica;
            var valorExcedente = cadRegraCobranca.CrcValorCobrancaExcedente;

            return valorMetrica < valorMedido ? (valorMedido - valorMetrica) * (valorExcedente == null ? 0 : (decimal)valorExcedente) : valorCobranca;
            
        }
        #endregion
